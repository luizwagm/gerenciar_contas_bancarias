{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/client.service\";\nimport * as i3 from \"../../services/transaction.service\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/inputtext\";\nimport * as i7 from \"primeng/dropdown\";\nimport * as i8 from \"primeng/dialog\";\nconst _c0 = function () {\n  return {\n    width: \"400px\"\n  };\n};\nconst _c1 = function () {\n  return {\n    label: \"Debit\",\n    value: \"debit\"\n  };\n};\nconst _c2 = function () {\n  return {\n    label: \"Credit\",\n    value: \"credit\"\n  };\n};\nconst _c3 = function (a0, a1) {\n  return [a0, a1];\n};\nexport let CreateTransactionComponent = /*#__PURE__*/(() => {\n  class CreateTransactionComponent {\n    constructor(fb, clientService, transactionService, messageService) {\n      this.fb = fb;\n      this.clientService = clientService;\n      this.transactionService = transactionService;\n      this.messageService = messageService;\n      this.display = false;\n      this.displayChange = new EventEmitter();\n      this.transactionCreated = new EventEmitter();\n      this.accounts = [];\n      this.createTransactionForm = this.fb.group({\n        AccountId: [\"\", Validators.required],\n        Amount: [\"\", Validators.required],\n        TransactionDate: [\"\", Validators.required],\n        TransactionType: [\"\", Validators.required]\n      });\n    }\n    ngOnInit() {\n      this.loadClients();\n    }\n    loadClients() {\n      this.clientService.getClients(\"client\").subscribe(clients => {\n        this.clients = clients;\n      }, error => console.error(\"Failed to load clients\", error));\n    }\n    onCreate() {\n      if (this.createTransactionForm.valid) {\n        const newTransaction = this.createTransactionForm.value;\n        this.transactionService.createTransaction(newTransaction).subscribe(() => {\n          this.messageService.add({\n            severity: \"success\",\n            summary: \"Success\",\n            detail: \"Transaction created successfully\"\n          });\n          this.createTransactionForm.reset();\n          this.displayChange.emit(false);\n          this.transactionCreated.emit();\n        }, error => {\n          console.error(\"Failed to create transaction\", error);\n          this.messageService.add({\n            severity: \"error\",\n            summary: \"Error\",\n            detail: \"Failed to create transaction\"\n          });\n        });\n      }\n    }\n    onHide() {\n      this.transactionCreated.emit();\n    }\n  }\n  CreateTransactionComponent.ɵfac = function CreateTransactionComponent_Factory(t) {\n    return new (t || CreateTransactionComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ClientService), i0.ɵɵdirectiveInject(i3.TransactionService), i0.ɵɵdirectiveInject(i4.MessageService));\n  };\n  CreateTransactionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateTransactionComponent,\n    selectors: [[\"app-create-transaction\"]],\n    inputs: {\n      display: \"display\"\n    },\n    outputs: {\n      displayChange: \"displayChange\",\n      transactionCreated: \"transactionCreated\"\n    },\n    decls: 22,\n    vars: 15,\n    consts: [[\"header\", \"Create Transaction\", 3, \"visible\", \"modal\", \"closable\", \"visibleChange\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"p-fluid\"], [1, \"p-field\"], [\"for\", \"AccountId\"], [\"id\", \"AccountId\", \"optionLabel\", \"AccountNumber\", \"formControlName\", \"AccountId\", 3, \"options\"], [\"for\", \"Amount\"], [\"id\", \"Amount\", \"type\", \"number\", \"pInputText\", \"\", \"formControlName\", \"Amount\"], [\"for\", \"TransactionDate\"], [\"id\", \"TransactionDate\", \"type\", \"datetime-local\", \"pInputText\", \"\", \"formControlName\", \"TransactionDate\"], [\"for\", \"TransactionType\"], [\"id\", \"TransactionType\", \"formControlName\", \"TransactionType\", 3, \"options\"], [\"label\", \"Create\", \"type\", \"submit\", 3, \"disabled\"], [\"label\", \"Cancel\", \"type\", \"button\", 3, \"click\"]],\n    template: function CreateTransactionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-dialog\", 0);\n        i0.ɵɵlistener(\"visibleChange\", function CreateTransactionComponent_Template_p_dialog_visibleChange_0_listener($event) {\n          return ctx.display = $event;\n        });\n        i0.ɵɵelementStart(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateTransactionComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.onCreate();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4);\n        i0.ɵɵtext(5, \"Account\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"p-dropdown\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 3)(8, \"label\", 6);\n        i0.ɵɵtext(9, \"Amount\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 3)(12, \"label\", 8);\n        i0.ɵɵtext(13, \"Transaction Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 3)(16, \"label\", 10);\n        i0.ɵɵtext(17, \"Transaction Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"p-dropdown\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"p-footer\");\n        i0.ɵɵelement(20, \"p-button\", 12);\n        i0.ɵɵelementStart(21, \"p-button\", 13);\n        i0.ɵɵlistener(\"click\", function CreateTransactionComponent_Template_p_button_click_21_listener() {\n          return ctx.display = false;\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c0));\n        i0.ɵɵproperty(\"visible\", ctx.display)(\"modal\", true)(\"closable\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.createTransactionForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"options\", ctx.accounts);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"options\", i0.ɵɵpureFunction2(12, _c3, i0.ɵɵpureFunction0(10, _c1), i0.ɵɵpureFunction0(11, _c2)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.createTransactionForm.invalid);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.Button, i4.Footer, i6.InputText, i7.Dropdown, i8.Dialog]\n  });\n  return CreateTransactionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}