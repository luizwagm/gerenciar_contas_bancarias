{"ast":null,"code":"import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { timezonePatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseTimezonePattern } from \"../utils.mjs\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);\n      case \"xxxxx\":\n        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, date.getTime() - getTimezoneOffsetInMilliseconds(date) - value);\n  }\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}