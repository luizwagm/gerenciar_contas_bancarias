{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/client.service\";\nimport * as i2 from \"../../services/account.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/panel\";\nimport * as i7 from \"primeng/dropdown\";\nfunction AccountManagementComponent_p_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 9);\n    i0.ɵɵlistener(\"onClick\", function AccountManagementComponent_p_button_9_Template_p_button_onClick_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.closeAccount());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AccountManagementComponent_p_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 10);\n    i0.ɵɵlistener(\"onClick\", function AccountManagementComponent_p_button_10_Template_p_button_onClick_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deactivateAccount());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nexport let AccountManagementComponent = /*#__PURE__*/(() => {\n  class AccountManagementComponent {\n    constructor(clientService, accountService) {\n      this.clientService = clientService;\n      this.accountService = accountService;\n      this.clients = [];\n      this.selectedClient = null;\n      this.transactions = 0;\n      this.deleteButton = false;\n      this.deactivateButton = false;\n      this.userTypeClient = false;\n      this.userTypeGerente = false;\n    }\n    ngOnInit() {\n      this.loadClients();\n      this.clientService.clientCreated$.subscribe(() => {\n        this.loadClients();\n      });\n      var userType = localStorage.getItem(\"userType\");\n      if (userType == \"client\") {\n        this.userTypeClient = true;\n      } else {\n        this.userTypeGerente = true;\n      }\n    }\n    loadClients() {\n      this.clientService.getClients(\"client\").subscribe(clients => {\n        this.clients = clients;\n        this.calculateTransactions();\n      }, error => console.error(\"Failed to load clients\", error));\n    }\n    calculateTransactions() {\n      let totalTransactions = 0;\n      this.clients.forEach(client => {\n        if (client.Accounts) {\n          client.Accounts.forEach(account => {\n            if (account.Transactions) {\n              totalTransactions += account.Transactions.length;\n            }\n          });\n        }\n      });\n      this.transactions = totalTransactions;\n      console.log(this.transactions);\n    }\n    createAccount() {\n      if (this.selectedClient) {\n        const accountNumber = this.generateAccountNumber();\n        const payload = {\n          AccountNumber: accountNumber,\n          Balance: 0.0,\n          ClientId: this.selectedClient.Id\n        };\n        this.accountService.createAccount(payload).subscribe(response => {\n          console.log(\"Account created successfully:\", response);\n          this.clientService.notifyClientCreated();\n          this.deleteButton = false;\n          this.deactivateButton = false;\n        }, error => console.error(\"Failed to create account\", error));\n      }\n    }\n    closeAccount() {\n      if (this.selectedClient) {\n        const payload = {\n          ClientId: this.selectedClient.Id\n        };\n        this.accountService.deleteAccount(payload).subscribe(response => {\n          console.log(\"Account removed successfully:\", response);\n          this.clientService.notifyClientCreated();\n          this.deleteButton = false;\n          this.deactivateButton = false;\n        }, error => console.error(error.message, error));\n      }\n    }\n    deactivateAccount() {\n      if (this.selectedClient) {\n        const payload = {\n          ClientId: this.selectedClient.Id\n        };\n        this.accountService.deactivateAccount(payload).subscribe(response => {\n          console.log(\"Account deactivate successfully:\", response);\n          this.clientService.notifyClientCreated();\n          this.deleteButton = false;\n          this.deactivateButton = false;\n        }, error => console.error(error.message, error));\n      }\n    }\n    changeOptionsUser() {\n      if (this.selectedClient) {\n        this.calculateTransactions();\n        if (this.transactions == 0) {\n          this.deactivateButton = false;\n          this.deleteButton = true;\n        } else {\n          this.deleteButton = false;\n          this.deactivateButton = true;\n        }\n      }\n    }\n    generateAccountNumber() {\n      const chars = \"0123456789\";\n      let accountNumber = \"\";\n      for (let i = 0; i < 10; i++) {\n        accountNumber += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      return accountNumber;\n    }\n  }\n  AccountManagementComponent.ɵfac = function AccountManagementComponent_Factory(t) {\n    return new (t || AccountManagementComponent)(i0.ɵɵdirectiveInject(i1.ClientService), i0.ɵɵdirectiveInject(i2.AccountService));\n  };\n  AccountManagementComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AccountManagementComponent,\n    selectors: [[\"app-account-management\"]],\n    decls: 11,\n    vars: 4,\n    consts: [[1, \"account-management\"], [\"header\", \"Gerenciar contas\", \"styleClass\", \"account-management-panel\"], [1, \"p-fluid\"], [1, \"p-field\"], [\"for\", \"client\"], [\"optionLabel\", \"FirstName\", \"placeholder\", \"Selecione um cliente\", 3, \"options\", \"ngModel\", \"ngModelChange\", \"onChange\"], [\"label\", \"Criar conta\", 3, \"onClick\"], [\"label\", \"Remover conta\", \"styleClass\", \"p-button-danger\", 3, \"onClick\", 4, \"ngIf\"], [\"label\", \"Inativar conta\", \"styleClass\", \"p-button-warning\", 3, \"onClick\", 4, \"ngIf\"], [\"label\", \"Remover conta\", \"styleClass\", \"p-button-danger\", 3, \"onClick\"], [\"label\", \"Inativar conta\", \"styleClass\", \"p-button-warning\", 3, \"onClick\"]],\n    template: function AccountManagementComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4);\n        i0.ɵɵtext(5, \"Selecionar cliente\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p-dropdown\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function AccountManagementComponent_Template_p_dropdown_ngModelChange_6_listener($event) {\n          return ctx.selectedClient = $event;\n        })(\"onChange\", function AccountManagementComponent_Template_p_dropdown_onChange_6_listener() {\n          return ctx.changeOptionsUser();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 3)(8, \"p-button\", 6);\n        i0.ɵɵlistener(\"onClick\", function AccountManagementComponent_Template_p_button_onClick_8_listener() {\n          return ctx.createAccount();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, AccountManagementComponent_p_button_9_Template, 1, 0, \"p-button\", 7);\n        i0.ɵɵtemplate(10, AccountManagementComponent_p_button_10_Template, 1, 0, \"p-button\", 8);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"options\", ctx.clients)(\"ngModel\", ctx.selectedClient);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.deleteButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.deactivateButton);\n      }\n    },\n    dependencies: [i3.NgIf, i4.NgControlStatus, i4.NgModel, i5.Button, i6.Panel, i7.Dropdown],\n    styles: [\".account-management-panel[_ngcontent-%COMP%]{margin-top:20px}.p-button[_ngcontent-%COMP%]{margin-right:10px}\"]\n  });\n  return AccountManagementComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}